

五种主要方式特点总结：
    --主要：
                ① 饿汉式：线程安全，调用效率高，不可以延迟加载
                ② 懒汉式：线程安全，调用效率不高，可以延迟加载
    -- 其他：
                ③ 双重锁：JVM底层内部模型原因，偶尔会出问题，不建议使用
                ④ 静态内部类：线程安全，调用效率高，可以延迟加载
                ⑤ 枚举式：线程安全，调用效率高，不可延迟加载。并且可以天然的防止反射和反序列化漏洞。
              
              
如何选择：
      
     -- 单例对象 该对象占用资源少，不需要延迟加载：
                          枚举式   好于  饿汉式
     -- 单例对象 该对象占用资源大， 需要延迟加载：
                         静态内部类  好于 懒汉式
                         
  
破解：
        反射和反序列化都能破解单例模式（枚举式不能破解）
        具体破解方案以及防破解方案见Test代码。
        
        
效率对比：
       测试10个线程，每个线程调用100000次的计时数据如下：
        -- 饿汉式计时：2ms
        -- 懒汉式计时：26ms
        -- 双重锁计时：3ms
        -- 静态内部类计时：2ms
        -- 枚举计时：1ms
        